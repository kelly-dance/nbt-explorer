{"version":3,"sources":["NBTController.ts","App.tsx","index.tsx"],"names":["TagTypes","NBTController","name","data","tag","reader","NBTReader","byte","value","compound","Error","this","type","string","end","short","int","long","float","double","byteArray","list","intArray","longArray","offset","DataView","buffer","getInt8","getInt16","getInt32","getBigInt64","getFloat32","getFloat64","len","i","push","slice","TextDecoder","decode","InitializeNBT","f","Promise","resolve","FileReader","onload","e","target","result","Uint8Array","pako","inflate","readAsArrayBuffer","App","useState","setData","uploadHandler","a","files","nbt","error","String","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ac8e672.chunk.js","sourcesContent":["export enum TagTypes{ end, byte, short, int, long, float, double, byteArray, string, list, compound, intArray, longArray };\ntype Pair<Tag, Type> = {type: Tag, value: Type};\ntype List<Tag extends TagTypes> = Pair<TagTypes.list, TagTypeTypes[Tag][]> | {listType: Tag};\nexport type TagTypeTypes = {\n  [TagTypes.end]: Pair<TagTypes.end, 0>;\n  [TagTypes.byte]: Pair<TagTypes.byte, number>;\n  [TagTypes.short]: Pair<TagTypes.short, number>;\n  [TagTypes.int]: Pair<TagTypes.int, number>;\n  [TagTypes.long]: Pair<TagTypes.long, bigint>;\n  [TagTypes.float]: Pair<TagTypes.float, number>;\n  [TagTypes.double]: Pair<TagTypes.double, number>;\n  [TagTypes.byteArray]: Pair<TagTypes.byteArray, number[]>;\n  [TagTypes.string]: Pair<TagTypes.string, string>;\n  [TagTypes.list]: List<TagTypes>;\n  [TagTypes.compound]: Pair<TagTypes.compound, {[key in string]?: TagTypeTypes[TagTypes]}>;\n  [TagTypes.intArray]: Pair<TagTypes.intArray, number[]>;\n  [TagTypes.longArray]: Pair<TagTypes.longArray, bigint[]>;\n}\n\nexport default class NBTController{\n  tag: TagTypeTypes[TagTypes.compound];\n  constructor(public name: string, data: Uint8Array){\n    const reader = new NBTReader(data);\n    const compoundTag = reader[TagTypes.byte]();\n    if(compoundTag.value !== TagTypes.compound) throw new Error('Root Tag should be compound');\n    this.tag = {\n      type: TagTypes.compound,\n      value: {\n        [reader[TagTypes.string]().value]: reader[TagTypes.compound](),\n      },\n    }\n  }\n}\n\nclass NBTReader{\n  data: DataView;\n  offset: number = 0;\n\n  constructor(data: Uint8Array){\n    this.data = new DataView(data.buffer);\n  }\n\n  [TagTypes.end](){ return { value: 0, type: TagTypes.end } as TagTypeTypes[TagTypes.end]; }\n  [TagTypes.byte](){\n    const value = this.data.getInt8(this.offset);\n    this.offset +=1 ;\n    return { value, type: TagTypes.byte } as TagTypeTypes[TagTypes.byte];\n  }\n  [TagTypes.short](){\n    const value = this.data.getInt16(this.offset);\n    this.offset += 2;\n    return { value, type: TagTypes.short } as TagTypeTypes[TagTypes.short];\n  }\n  [TagTypes.int]() {\n    const value = this.data.getInt32(this.offset);\n    this.offset += 4;\n    return { value, type: TagTypes.int } as TagTypeTypes[TagTypes.int];\n  }\n  [TagTypes.long](){\n    const value = this.data.getBigInt64(this.offset);\n    this.offset += 4;\n    return { value, type: TagTypes.long } as TagTypeTypes[TagTypes.long];\n  }\n  [TagTypes.float](){\n    const value = this.data.getFloat32(this.offset);\n    this.offset += 4;\n    return { value, type: TagTypes.float } as TagTypeTypes[TagTypes.float];\n  }\n  [TagTypes.double](){\n    const value = this.data.getFloat64(this.offset);\n    this.offset += 8;\n    return { value, type: TagTypes.double } as TagTypeTypes[TagTypes.double];\n  }\n  [TagTypes.byteArray](){\n    const len = this[TagTypes.int]().value;\n    const value: number[] = [];\n    for(let i = 0; i < len; i++) value.push(this[TagTypes.byte]().value);\n    return { value, type: TagTypes.byteArray } as TagTypeTypes[TagTypes.byteArray];\n  }\n  [TagTypes.string](){\n    const len = this[TagTypes.short]().value;\n    const slice = this.data.buffer.slice(this.offset, this.offset + len);\n    this.offset += len;\n    return { value: (new TextDecoder('utf-8')).decode(slice), type: TagTypes.string } as TagTypeTypes[TagTypes.string];\n  }\n  [TagTypes.list](){\n    const type: TagTypes = this[TagTypes.byte]().value;\n    const len = this[TagTypes.int]().value;\n    const value: TagTypeTypes[TagTypes][] = [];\n    for(let i = 0; i < len; i++) value.push(this[type]()); \n    return { value, type: TagTypes.list } as TagTypeTypes[TagTypes.list];\n  }\n  [TagTypes.compound](){\n    const tag: {[key: string]: TagTypeTypes[TagTypes]} = {};\n    while(true){\n      const type: TagTypes = this[TagTypes.byte]().value;\n      if(type === TagTypes.end) break;\n      tag[this[TagTypes.string]().value] = this[type]();\n    }\n    return { value: tag, type: TagTypes.compound } as TagTypeTypes[TagTypes.compound];\n  }\n  [TagTypes.intArray](){\n    const len = this[TagTypes.int]().value;\n    const value: number[] = [];\n    for(let i = 0; i < len; i++) value.push(this[TagTypes.int]().value);\n    return { value, type: TagTypes.intArray } as TagTypeTypes[TagTypes.intArray];\n  }\n  [TagTypes.longArray](){\n    const len = this[TagTypes.int]().value;\n    const value: bigint[] = [];\n    for(let i = 0; i < len; i++) value.push(this[TagTypes.long]().value);\n    return { value, type: TagTypes.longArray } as TagTypeTypes[TagTypes.longArray];\n  }\n}","import React, { useState } from 'react';\nimport pako from 'pako';\nimport NBTController from './NBTController';\n\nconst InitializeNBT = (f: File): Promise<NBTController | undefined> => {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      if(!e.target?.result || typeof e.target?.result !== 'object') throw new Error(`Error getting binary data for ${f.name}`);\n      let data = new Uint8Array(e.target.result);\n      if(data[0] === 0x1f && data[1] === 0x8b) data = pako.inflate(data);\n      resolve(new NBTController(f.name, data));\n    }\n    reader.readAsArrayBuffer(f);\n  });\n}\n\ntype DisplayData = \n  {type: 'nbt', nbt: NBTController} |\n  {type: 'error', error: string} |\n  {type: 'waiting'}\n\nfunction App() {\n  const [data, setData] = useState<DisplayData>({type:'waiting'});\n  const uploadHandler = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if(!e.target.files) return;\n    try{\n      const nbt = await InitializeNBT(e.target.files[0]);\n      if(nbt) setData({type:'nbt',nbt});\n      else setData({type:'waiting'});\n    }catch(e){\n      setData({type:'error', error:String(e)})\n    }\n  }\n  return (\n    <div>\n      <input type=\"file\" onChange={uploadHandler}/>\n      {data.type==='nbt'?(\n        <div>\n          {data.nbt.name}\n        </div>\n      ):data.type==='error'?(\n        <div>\n          {data.error}\n        </div>\n      ):''}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}