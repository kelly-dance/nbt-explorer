{"version":3,"sources":["NBTController.ts","App.tsx","index.tsx"],"names":["TagTypes","NBTController","name","data","tag","compressed","this","pako","inflate","decodeNBT","encoded","encodeNBT","redecoded","console","log","nbt","compress","DataView","ArrayBuffer","offset","accommodate","size","reqLen","byteLength","newLen","Math","ceil","log2","newArr","Uint8Array","set","buffer","fill","helper","type","end","shift","setInt8","byte","value","short","setInt16","int","setInt32","long","setBigInt64","float","setFloat32","double","setFloat64","byteArray","length","forEach","b","i","string","Buffer","from","list","listType","entry","compound","Object","entries","key","undefined","intArray","longArray","slice","raw","methods","getInt8","getInt16","getInt32","getBigInt64","getFloat32","getFloat64","len","push","TextDecoder","decode","Error","InitializeNBT","f","Promise","resolve","reader","FileReader","onload","e","target","result","readAsArrayBuffer","App","useState","setData","uploadHandler","a","files","error","String","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e3ce8f1.chunk.js","sourcesContent":["import pako from 'pako';\n\nexport enum TagTypes{ end, byte, short, int, long, float, double, byteArray, string, list, compound, intArray, longArray };\ntype Pair<Tag, Type> = {type: Tag, value: Type};\ntype List<Tag extends TagTypes> = Tag extends TagTypes ? { listType: Tag, list: TagTypeTypes[Tag]['value'][] } : never;\nexport type TagTypeTypes = {\n  [TagTypes.end]: Pair<TagTypes.end, 0>;\n  [TagTypes.byte]: Pair<TagTypes.byte, number>;\n  [TagTypes.short]: Pair<TagTypes.short, number>;\n  [TagTypes.int]: Pair<TagTypes.int, number>;\n  [TagTypes.long]: Pair<TagTypes.long, bigint>;\n  [TagTypes.float]: Pair<TagTypes.float, number>;\n  [TagTypes.double]: Pair<TagTypes.double, number>;\n  [TagTypes.byteArray]: Pair<TagTypes.byteArray, number[]>;\n  [TagTypes.string]: Pair<TagTypes.string, string>;\n  [TagTypes.list]: Pair<TagTypes.list, List<TagTypes>>;\n  [TagTypes.compound]: Pair<TagTypes.compound, {[key in string]?: TagTypeTypes[TagTypes]}>;\n  [TagTypes.intArray]: Pair<TagTypes.intArray, number[]>;\n  [TagTypes.longArray]: Pair<TagTypes.longArray, bigint[]>;\n}\n\nexport default class NBTController{\n  tag: TagTypeTypes[TagTypes.compound];\n  compressed: boolean;\n  constructor(public name: string, data: Uint8Array){\n    this.compressed = data[0] === 0x1f && data[1] === 0x8b;\n    if(this.compressed) data = pako.inflate(data);\n    this.tag = decodeNBT(data);\n    const encoded = encodeNBT(this.tag, this.compressed);\n    const redecoded = decodeNBT(encoded);\n    console.log(this.tag, redecoded);\n  }\n}\n\nconst encodeNBT = (nbt: TagTypeTypes[TagTypes.compound], compress: boolean) => {\n  let data = new DataView(new ArrayBuffer(256));\n  let offset = 0;\n  const accommodate = (size: number) => {\n    const reqLen = offset + size;\n    if(data.byteLength < reqLen) {\n      const newLen = 2 ** Math.ceil(Math.log2(reqLen));\n      const newArr = new Uint8Array(new ArrayBuffer(newLen));\n      newArr.set(new Uint8Array(data.buffer));\n      if(offset > data.byteLength) {\n        console.log('how is this even possible??');\n        newArr.fill(0,data.byteLength,offset);\n      }\n      data = new DataView(newArr.buffer);\n    }\n    return () => offset += size;\n  }\n  (function helper(tag: TagTypeTypes[TagTypes]){\n    switch(tag.type){\n      case TagTypes.end: {\n        const shift = accommodate(1);\n        data.setInt8(offset, TagTypes.end);\n        shift();\n        return;\n      }\n      case TagTypes.byte: {\n        const shift = accommodate(1);\n        data.setInt8(offset, tag.value);\n        shift();\n        return;\n      }\n      case TagTypes.short: {\n        const shift = accommodate(2);\n        data.setInt16(offset, tag.value);\n        shift();\n        return;\n      }\n      case TagTypes.int: {\n        const shift = accommodate(4);\n        data.setInt32(offset, tag.value);\n        shift();\n        return;\n      }\n      case TagTypes.long: {\n        const shift = accommodate(8);\n        data.setBigInt64(offset, tag.value);\n        shift();\n        return;\n      }\n      case TagTypes.float: {\n        const shift = accommodate(4);\n        data.setFloat32(offset, tag.value);\n        shift();\n        return;\n      }\n      case TagTypes.double: {\n        const shift = accommodate(4);\n        data.setFloat64(offset, tag.value);\n        shift();\n        return;\n      }\n      case TagTypes.byteArray: {\n        helper({type:TagTypes.int,value:tag.value.length})\n        const shift = accommodate(tag.value.length);\n        tag.value.forEach((b,i)=>data.setInt8(offset+i,b));\n        shift();\n        return;\n      }\n      case TagTypes.string: {\n        helper({type:TagTypes.short,value:tag.value.length})\n        const shift = accommodate(tag.value.length);\n        Buffer.from(tag.value).forEach((b,i)=>data.setInt8(offset+i,b));\n        shift();\n        return;\n      }\n      case TagTypes.list: {\n        helper({type:TagTypes.byte,value:tag.value.listType});\n        helper({type:TagTypes.int,value:tag.value.list.length});\n        tag.value.list.forEach((entry: TagTypeTypes[TagTypes]['value'])=>helper({type:tag.value.listType,value:entry} as TagTypeTypes[TagTypes]));\n        return;\n      }\n      case TagTypes.compound: {\n        const pairs = Object.entries(tag.value);\n        pairs.forEach(([key, value]) => {\n          if(value === undefined) return;\n          helper({type:TagTypes.byte,value:value.type});\n          helper({type:TagTypes.string,value:key});\n          helper(value);\n        });\n        helper({type:TagTypes.end,value:0});\n        return;\n      }\n      case TagTypes.intArray: {\n        helper({type:TagTypes.int,value:tag.value.length*4})\n        const shift = accommodate(tag.value.length*4);\n        tag.value.forEach((b,i)=>data.setInt32(offset+i*4,b));\n        shift();\n        return;\n      }\n      case TagTypes.longArray: {\n        helper({type:TagTypes.int,value:tag.value.length*8})\n        const shift = accommodate(tag.value.length*8);\n        tag.value.forEach((b,i)=>data.setBigInt64(offset+i*8,b));\n        shift();\n        return;\n      }\n    }\n  })(nbt);\n  return new Uint8Array(data.buffer.slice(0,offset-1));\n}\n\nconst decodeNBT = (raw: Uint8Array) => {\n  const data = new DataView(raw.buffer);\n  let offset = 0;\n  const methods = {\n    [TagTypes.end](){ return { value: 0, type: TagTypes.end } as TagTypeTypes[TagTypes.end]; },\n    [TagTypes.byte](){\n      const value = data.getInt8(offset);\n      offset +=1 ;\n      return { value, type: TagTypes.byte } as TagTypeTypes[TagTypes.byte];\n    },\n    [TagTypes.short](){\n      const value = data.getInt16(offset);\n      offset += 2;\n      return { value, type: TagTypes.short } as TagTypeTypes[TagTypes.short];\n    },\n    [TagTypes.int]() {\n      const value = data.getInt32(offset);\n      offset += 4;\n      return { value, type: TagTypes.int } as TagTypeTypes[TagTypes.int];\n    },\n    [TagTypes.long](){\n      const value = data.getBigInt64(offset);\n      offset += 4;\n      return { value, type: TagTypes.long } as TagTypeTypes[TagTypes.long];\n    },\n    [TagTypes.float](){\n      const value = data.getFloat32(offset);\n      offset += 4;\n      return { value, type: TagTypes.float } as TagTypeTypes[TagTypes.float];\n    },\n    [TagTypes.double](){\n      const value = data.getFloat64(offset);\n      offset += 8;\n      return { value, type: TagTypes.double } as TagTypeTypes[TagTypes.double];\n    },\n    [TagTypes.byteArray](){\n      const len = this[TagTypes.int]().value;\n      const value: number[] = [];\n      for(let i = 0; i < len; i++) value.push(this[TagTypes.byte]().value);\n      return { value, type: TagTypes.byteArray } as TagTypeTypes[TagTypes.byteArray];\n    },\n    [TagTypes.string](){\n      const len = this[TagTypes.short]().value;\n      const slice = data.buffer.slice(offset, offset + len);\n      offset += len;\n      return { value: (new TextDecoder('utf-8')).decode(slice), type: TagTypes.string } as TagTypeTypes[TagTypes.string];\n    },\n    [TagTypes.list](){\n      const type: TagTypes = this[TagTypes.byte]().value;\n      const len = this[TagTypes.int]().value;\n      const list: TagTypeTypes[TagTypes]['value'][] = [];\n      for(let i = 0; i < len; i++) list.push(this[type]().value); \n      return { value: { listType: type, list }, type: TagTypes.list } as TagTypeTypes[TagTypes.list];\n    },\n    [TagTypes.compound](){\n      const tag: {[key: string]: TagTypeTypes[TagTypes]} = {};\n      while(true){\n        const type: TagTypes = this[TagTypes.byte]().value;\n        if(type === TagTypes.end) break;\n        tag[this[TagTypes.string]().value] = this[type]();\n      }\n      return { value: tag, type: TagTypes.compound } as TagTypeTypes[TagTypes.compound];\n    },\n    [TagTypes.intArray](){\n      const len = this[TagTypes.int]().value;\n      const value: number[] = [];\n      for(let i = 0; i < len; i++) value.push(this[TagTypes.int]().value);\n      return { value, type: TagTypes.intArray } as TagTypeTypes[TagTypes.intArray];\n    },\n    [TagTypes.longArray](){\n      const len = this[TagTypes.int]().value;\n      const value: bigint[] = [];\n      for(let i = 0; i < len; i++) value.push(this[TagTypes.long]().value);\n      return { value, type: TagTypes.longArray } as TagTypeTypes[TagTypes.longArray];\n    },\n  }\n  const compoundTag = methods[TagTypes.byte]();\n  if(compoundTag.value !== TagTypes.compound) throw new Error('Root Tag should be compound');\n  return {\n    type: TagTypes.compound as const,\n    value: {\n      [methods[TagTypes.string]().value]: methods[TagTypes.compound](),\n    },\n  }\n}\n","import React, { useState } from 'react';\nimport NBTController from './NBTController';\n\nconst InitializeNBT = (f: File): Promise<NBTController | undefined> => {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      if(!e.target?.result || typeof e.target?.result !== 'object') throw new Error(`Error getting binary data for ${f.name}`);\n      let data = new Uint8Array(e.target.result);\n      resolve(new NBTController(f.name, data));\n    }\n    reader.readAsArrayBuffer(f);\n  });\n}\n\ntype DisplayData = \n  {type: 'nbt', nbt: NBTController} |\n  {type: 'error', error: string} |\n  {type: 'waiting'}\n\nfunction App() {\n  const [data, setData] = useState<DisplayData>({type:'waiting'});\n  const uploadHandler = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if(!e.target.files) return;\n    try{\n      const nbt = await InitializeNBT(e.target.files[0]);\n      console.log(nbt);\n      if(nbt) setData({type:'nbt',nbt});\n      else setData({type:'waiting'});\n    }catch(e){\n      setData({type:'error', error:String(e)})\n    }\n  }\n  return (\n    <div>\n      <input type=\"file\" onChange={uploadHandler}/>\n      {data.type==='nbt'?(\n        <div>\n          {data.nbt.name}\n        </div>\n      ):data.type==='error'?(\n        <div>\n          {data.error}\n        </div>\n      ):''}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}